@page "/"
@page "/features"
@page "/features/{FeatureId:guid}"
@page "/features/{FeatureId:guid}/profiles"
@attribute [Authorize]

@using System.Globalization
@using Ata.DeloSled.FeatureTracker.Domain
@using AutoMapper
@using MediatR
@using Microsoft.AspNetCore.Authorization
@using ViewModels
@using Ata.Investment.Profile.Cmd
@using Ata.Investment.Profile.Cmd.Households
@using Ata.Investment.Profile.Domain.Household

@inherits Microsoft.AspNetCore.Components.OwningComponentBase

@inject IMediator MediatR;
@inject NavigationManager NavigationManager

@* TODO Сделать компонент панели инструментов *@
<section class="sub-nav">
    @{
        bool loaded = _itemsLoaded;
    }

    <button value="New Feature" disabled="@(!loaded)" class="btn btn-primary" @onclick="@BeginCreatingHousehold"><i class="fas fa-user-plus"></i> New Feature</button>
    <button value="Archive Selected" disabled="@(_workItem is not { IsActive: true })" class="btn btn-danger" @onclick="@BeginArchiveHousehold"><i class="fas fa-archive"></i> Archive Selected</button>
    <Feature Name="Scheduler">
        <button value="Scheduler" disabled="@(_workItem is not {IsActive: true})" class="btn btn-primary" @onclick="@BeginScheduleClient"><i class="fas fa-calendar-alt"></i> Schedule Meeting</button>
    </Feature>
    @if (_workItem is { IsActive: false })
    {
        <button value="Restore Selected" class="btn btn-primary" @onclick="@BeginRestoreHousehold"><i class="fas fa-undo"></i> Restore Selected</button>
        <button value="Remove Permanently" class="btn btn-danger" @onclick="@BeginRemoveHousehold"><i class="fas fa-trash-alt"></i> Remove Permanently</button>
    }

    <div class="input-group-sm">
        <input type="text" disabled="@(!loaded)" @oninput="HandleUserSearch" class="form-control" placeholder="Search (3+ characters)"/>
        <div class="input-group-append">
            <span class="input-group">
                <button value="search" class="btn btn-primary btn-sm"><i class="fas fa-search"></i></button>
            </span>
        </div>
    </div>
</section>

<main id="clientsList">

@if (!_itemsLoaded)
{
    <section class="modal show-modal" style="display: flex; align-items: center;">
        <div class="modal-content loading"><img src="@(CommonPaths.LoadingGif)" alt="loading"/></div>
    </section>
}

<section id="clientsListTable">
    <table>
        <thead>
        <tr>
            @* Динамически создать колонки по типу ДТО *@
            <th>Название</th>
            <th>Статус</th>
        </tr>
        </thead>
        <tbody>
        @foreach (WorkItem workItem in _featuresList)
        {
            <tr>
                <td>@workItem.Title</td>
                <td>@workItem.State.DisplayName</td>
            </tr>
        }
    </tbody>
    </table>
</section>

@if (_workItem != null)
{
    <!-- MASTER COMPONENT --> 
    <section id="clientInfo">
        <section class="clientInfoDetails" style="grid-area: primaryClient;">
            <div>
                <h3 class="householdMemberName">@_selectedPrimaryClient.Name</h3>
                <i class="fas fa-pencil-alt" @onclick="@(() => BeginEditClientDialogue(_selectedPrimaryClient))"></i>
            </div>
            <div>Email: <span>@_selectedPrimaryClient.Email</span></div>
            <div>Date of Birth: <span>@_selectedPrimaryClient.DateOfBirth.ToString("MMMM dd, yyyy", new CultureInfo("en-US"))</span></div>
        </section>

        <hr/>

        <section id="jointClientInfo" class="clientInfoDetails" style="grid-area: jointClient;">
            @if (_selectedJointClient.Guid == Guid.Empty)
            {
                <div>
                    <button class="btn btn-secondary btn-sm" value="Edit Selected" @onclick="@BeginAddToHousehold"><i class="fas fa-user-plus"></i> Add to household</button>
                </div>
            }
            else
            {
                <div>
                    <h3 class="householdMemberName">@_selectedJointClient.Name</h3>
                    <i class="fas fa-pencil-alt" @onclick="@(() => BeginEditClientDialogue(_selectedJointClient))"></i>
                    <i class="fas fa-user-minus" @onclick="@(() => BeginRemoveFromHousehold(_selectedJointClient.Guid))"></i>
                    <br/>
                </div>
                <div>Email: <span>@_selectedJointClient.Email</span></div>
                <div>Date of Birth: <span>@_selectedJointClient.DateOfBirth.ToString("MMMM dd, yyyy", new CultureInfo("en-US"))</span></div>
            }

        </section>
    </section>
    
    <!-- TODO DETAIL COMPONENT -->
    @* <MeetingsArea Household="@_workItem" /> *@
}

<section id="client_info">
    <select>
        <option>New</option>
        <option>Active</option>
        <option>Closed</option>
    </select>
</section>
</main>

<ClientEditorModal OnValidSubmit="@((Client c) => _clientValidSubmitHandler(c))" @ref="@_clientDialogue" />
<ScheduleMeetingModal @ref="@_newScheduleDialogue" HouseholdId="@_workItem?.Guid"/>
<Modal Title="Confirm removal" ModalType="@ModalType.YesNo" YesHandler="@RemoveClientFromHousehold" @ref="@_clientRemoveDialogue">
    Confirm removing @_clientNameToRemove from household?
</Modal>
<Modal Title="Confirm archive" ModalType="@ModalType.YesNo" YesHandler="@ArchiveHousehold" @ref="_householdArchiveDialogue">
    Confirm archiving household with @_householdNameToArchive ?
</Modal>
<Modal Title="Confirm restore" ModalType="ModalType.YesNo" YesHandler="@RestoreHousehold" @ref="_householdRestoreDialogue">
    Confirm restoring household with @_householdNameToArchive ?
</Modal>
<Modal Title="Confirm remove" ModalType="@ModalType.YesNo" YesHandler="@RemoveHousehold" @ref="_householdRemoveDialogue">
    Confirm permanently remove household with @_householdNameToArchive ?
</Modal>

@code {
    private ClientEditorModal _clientDialogue;

    // ===== DIALOGUES ======
    //
    private Modal _clientRemoveDialogue;

    private Modal _householdArchiveDialogue;

    private Modal _householdRemoveDialogue;

    private Modal _householdRestoreDialogue;

    private ScheduleMeetingModal _newScheduleDialogue;
    //
    // ----------------------
    
    // TODO Использовать общий тип EntityDTO
    private IEnumerable<WorkItem> _featuresList = new List<WorkItem>();

    #nullable enable
    private WorkItem? _workItem;
    #nullable restore

    private ClientVM _selectedPrimaryClient = new ClientVM();
    
    private ClientVM _selectedJointClient = new ClientVM();

    private delegate Task ClientSubmitHandler(Client client);

    private ClientSubmitHandler _clientValidSubmitHandler;

    private string _baseUrl;

    private bool _itemsLoaded;

    private bool _isStatusFilterOpened;

    private string _currentSearchString;

    private bool _filterIsActive = true;

    private bool _filterIsArchived;

    private string UrlSuffix =>
                "isActive=" + (_filterIsActive ? "true" : "false") + "&" +
                "isArchived=" + (_filterIsArchived ? "true" : "false");

    
    [Parameter]
    public Guid FeatureID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += HandleViewModeChanged;
        ParseClientsFilter();

        _featuresList = new List<WorkItem>()
        {
            new WorkItem("Бизнес Справочник") { StateId = StateEnum.New },
            new WorkItem("Статусы документов") { StateId = StateEnum.New },
            new WorkItem("Опросник") { StateId = StateEnum.Active }
        };
        _itemsLoaded = true;
    }

    private void HandleViewModeChanged(object sender, LocationChangedEventArgs e)
    {
        ParseClientsFilter();
        SyncUI();
    }

    private void ParseClientsFilter()
    {
        NavigationManager.TryGetQueryString("isActive", out string filterString);
        bool.TryParse(filterString, out _filterIsActive);
        NavigationManager.TryGetQueryString("isArchived", out filterString);
        bool.TryParse(filterString, out _filterIsArchived);

        if (_filterIsActive == false && _filterIsArchived == false)
        {
            _filterIsActive = true;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (FeatureID != Guid.Empty)
        {
            _itemsLoaded = false;
            await FetchRequestedClientHousehold();
            _itemsLoaded = true;
        }
        else
        {
            _workItem = null;
        }

        _baseUrl = "/clients/" + FeatureID;
    }

    private async Task HandleUserSearch(ChangeEventArgs e)
    {
        string value = _currentSearchString = e.Value.ToString();

        if (string.IsNullOrEmpty(value))
        {
            // TODO фильтр по колонкам
            // _featuresList = await MediatR.Send();
            return;
        }

        if (value.Length < 3)
        {
            return;
        }

        // TODO фильтр по колонкам
        // _featuresList = await MediatR.Send(new HouseholdsQuery());
    }

    // ===== Delegate Event Handlers ===============
    private void BeginCreatingHousehold(MouseEventArgs e)
    {
        _clientValidSubmitHandler = CreateHouseholdWithClient;
        _clientDialogue.OpenForClientVm(new ClientVM());
    }
    
    // ReSharper disable once SuggestBaseTypeForParameter
    private void BeginEditClientDialogue(ClientVM clientVm)
    {
        _clientValidSubmitHandler = UpdateClient;
        _clientDialogue.OpenForClientVm((ClientVM)clientVm.Clone());
    }
    
    private void BeginAddToHousehold(MouseEventArgs e)
    {
        _clientValidSubmitHandler = AddClientToHousehold;
        _clientDialogue.OpenForClientVm(new ClientVM());
    }

    private string _clientNameToRemove;
    private void BeginRemoveFromHousehold(Guid clientId)
    {
        _clientNameToRemove = _selectedPrimaryClient.Guid == clientId ? _selectedPrimaryClient.Name : _selectedJointClient.Name;

        _clientRemoveDialogue.Open();
        _clientIdToRemove = clientId;
    }

    // same as delete
    private string _householdNameToArchive;
    private void BeginArchiveHousehold(MouseEventArgs e)
    {
        _householdNameToArchive = _selectedPrimaryClient.Name;

        _householdArchiveDialogue.Open();
        _householdIdToArchive = _workItem.Guid;
    }

    // TODO корзина сущностей
    private void BeginRestoreHousehold(MouseEventArgs e)
    {
        _householdNameToArchive = _selectedPrimaryClient.Name;

        _householdRestoreDialogue.Open();
    }

    // household name to delete can share with archive
    private void BeginRemoveHousehold(MouseEventArgs e)
    {
        _householdNameToArchive = _selectedPrimaryClient.Name;

        _householdRemoveDialogue.Open();
        _householdIdToArchive = _workItem.Guid;
    }

    private void BeginScheduleClient(MouseEventArgs e)
    {
        _newScheduleDialogue.Open();
    }

    
    // ======== Perform Actions ===================
    private async Task CreateHouseholdWithClient(Client client)
    {
        Household newHousehold = new Household(client);
        await MediatR.Send(new CreateHouseholdCommand(newHousehold));

        await SyncUI();
        NavigationManager.NavigateTo($"/clients/{client.Guid}");
    }

    private async Task AddClientToHousehold(Client client)
    {
        // TODO Выполнение после валидации из формы всплывающего окна.
        _selectedJointClient = Mapper.Map<ClientVM>(client);

        await MediatR.Send(new AddToHouseholdCommand(_workItem.Guid, client));

        await SyncUI();
    }

    private Guid _clientIdToRemove;
    private async Task RemoveClientFromHousehold()
    {

        // корзина
        await MediatR.Send(new RemoveFromHouseholdCommand(_workItem.Guid, _clientIdToRemove));

        if (_selectedJointClient.Guid == _clientIdToRemove)
        {
            _selectedJointClient = new ClientVM();
        }

        if (_selectedPrimaryClient.Guid == _clientIdToRemove)
        {
            _selectedPrimaryClient = _selectedJointClient;
            _selectedJointClient = new ClientVM();
        }

        await SyncUI();
    }

    private async Task UpdateClient(Client client)
    {
        await MediatR.Send(new UpdateClientCommand(client.Guid, client));
        await FetchRequestedClientHousehold();
        await SyncUI();
    }

    private async Task SyncUI()
    {
        // _featuresList = await MediatR.Send();
        StateHasChanged();
    }

    private async Task FetchRequestedClientHousehold()
    {
        // _workItem = await MediatR.Send(new HouseholdByClientIdQuery(FeatureID));
        if (_workItem == null)
        {
            NavigationManager.NavigateTo("/clients");
            return;
        }
        
        _baseUrl = "/clients/" + FeatureID;
    }

    private Guid _householdIdToArchive;
    private async Task ArchiveHousehold()
    {

        await MediatR.Send(new ArchiveHouseholdCommand(_householdIdToArchive));
        _householdIdToArchive = Guid.Empty;

        await SyncUI();
        NavigationManager.NavigateTo("/clients");
    }

    private Guid _householdIdToRestore;
    private async Task RestoreHousehold()
    {

        await MediatR.Send(new RestoreHouseholdCommand(_householdIdToRestore));
        _householdIdToRestore = Guid.Empty;

        await SyncUI();
        NavigationManager.NavigateTo("/clients");
    }

    private async Task RemoveHousehold()
    {

        await MediatR.Send(new RemoveHouseholdCommand(_householdIdToArchive));
        _householdIdToArchive = Guid.Empty;

        await SyncUI();
        NavigationManager.NavigateTo("/clients?isActive=false&isArchived=true");
    }

    private void ApplyStatusFilter()
    {
        _isStatusFilterOpened = false;
        string url = NavigationManager.Uri;
        int queryIndex = url.IndexOf("?", StringComparison.Ordinal);
        if (queryIndex > 0)
        {
            url = url.Substring(0, queryIndex);
        }

        url += "?" + UrlSuffix;
        NavigationManager.NavigateTo(url);
    }

    protected override void Dispose(bool disposing)
    {
        NavigationManager.LocationChanged -= HandleViewModeChanged;
    }

}
